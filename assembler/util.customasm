#once
#include "stupid-risc-machine.customasm"

#fn absToRelAddr(addr) => {
    reladdr = addr - $
    assert(reladdr <= 0x800, "Relative address is too far form PC")
    assert(reladdr >= !0x800, "Relative address is too far form PC")
    reladdr`12
}

#ruledef {
    mov {dest: reg}, {src: reg} => asm {
        add {dest}, {src}, r0
    }

    nop => asm {
        mov r0, r0
    }
    ldw {dest: reg}, #{imm: i16} => asm {
        ldh {dest}, #{imm}[15:8]
        ldl {dest}, #{imm}[7:0]
    }

    jmp {addr_reg: reg} => asm {
        mov rPC, {addr_reg}
    }

    jmp #{addr: i16}, {reg1 : reg} => {
        assert(reg1 != r0, "Cannot use r0 as auxiliary register")
        asm {
            ldw {reg1}, #{addr}
            jmp {reg1}
        }
    }

    jeq ##{abs_addr: s16} => {
        asm {
            jeq #{absToRelAddr(abs_addr)}
        }
    }
    jgt ##{abs_addr: s16} => {
        asm {
            jgt #{absToRelAddr(abs_addr)}
        }
    }
    jel ##{abs_addr: s16} => {
        asm {
            jel #{absToRelAddr(abs_addr)}
        }
    }
}

