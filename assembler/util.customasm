#once
#include "stupid-risc-machine.customasm"

#fn absToRelAddr(addr) => {
    reladdr = addr - $ 
    assert(reladdr <= 0x800, "Relative address is too far form PC")
    assert(reladdr >= !0x800, "Relative address is too far form PC")
    reladdr`12
}

#ruledef {
    mov {dest: reg}, {src: reg} => asm {
        add {dest}, {src}, r0
    }

    nop => asm {
        mov r0, r0
    }
    ldh {dest: reg}, #{imm: i8} => asm {
        ldl {dest}, #{imm}
        sl {dest}, {dest}, #8
    }
    ldw {dest: reg}, {tmp: reg}, #{imm: i16} => asm {
        ldh {dest}, #{imm}[15:8]
        ldl {tmp}, #{imm}[7:0]
        or {dest}, {dest}, {tmp}
    }

    jmp {addr_reg: reg} => asm {
        mov rPC, {addr_reg}
    }

    jeq ##{abs_addr: s16} => {
        reladdr = absToRelAddr(abs_addr)`12
        0xA @ addr_I12__(reladdr)`12
    }
    jgt ##{abs_addr: s16} => {
        reladdr = absToRelAddr(abs_addr)`12
        0xB @ addr_I12__(reladdr)`12
    }
    jlt ##{abs_addr: s16} => {
        reladdr = absToRelAddr(abs_addr)`12
        0xC @ addr_I12__(reladdr)`12
    }

    cmp {rIN1: reg}, {rIN2: reg} => asm {
        sbc r0, {rIN1}, {rIN2}
    }
}

