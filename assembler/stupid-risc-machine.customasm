#once

#bankdef progmem {
    #bits 16
    #addr 0x0000
    #size 0x65536
    #labelalign
    #outp 0
}

#const(noemit) r0   = 0`4
#const(noemit) r1   = 1`4
#const(noemit) r2   = 2`4
#const(noemit) r3   = 3`4
#const(noemit) r4   = 4`4
#const(noemit) r5   = 5`4
#const(noemit) r6   = 6`4
#const(noemit) r7   = 7`4
#const(noemit) r8   = 8`4
#const(noemit) r9   = 9`4
#const(noemit) r10  = 10`4
#const(noemit) r11  = 11`4
#const(noemit) r12  = 12`4
#const(noemit) r13  = 13`4
#const(noemit) rPC  = 14`4
#const(noemit) rFLG = 15`4

#subruledef reg {
    r0      => r0 
    r1      => r1 
    r2      => r2 
    r3      => r3 
    r4      => r4 
    r5      => r5 
    r6      => r6 
    r7      => r7 
    r8      => r8 
    r9      => r9 
    r10     => r10 
    r11     => r11 
    r12     => r12 
    r13     => r13 
    rPC     => rPC 
    rFLG    => rFLG 
}

#fn addr_RRR__(rOUT: reg, rIN1: reg, rIN2: reg) => {
    rOUT @ rIN1 @ rIN2
}
#fn addr_RI8__(rOUT: reg, imm8: i8) => {
    rOUT @ imm8
}
#fn addr_I12__(imm12: i12) => {
    i12
}
#fn addr_RRI4_(rOUT: reg, rIN1: reg, imm4: i4) => {
    rOUT @ rIN1 @ imm4
}
#fn addr_I4RR_(imm4: i4, rIN1, rIN2) => {
    
}



#ruledef opcodes {
    adc {out: reg}, {in1: reg}, {in2: reg}  => 0x0 @ addr_RRR__(out, in1, in2)      ; adc rOUT, rIN1, rIN2
    sbc {out: reg}, {in1: reg}, {in2: reg}  => 0x1 @ addr_RRR__(out, in1, in2)      ; sbc rOUT, rIN1, rIN2
    and {out: reg}, {in1: reg}, {in2: reg}  => 0x2 @ addr_RRR__(out, in1, in2)      ; and rOUT, rIN1, rIN2
    or  {out: reg}, {in1: reg}, {in2: reg}  => 0x3 @ addr_RRR__(out, in1, in2)      ; or  rOUT, rIN1, rIN2
    xor {out: reg}, {in1: reg}, {in2: reg}  => 0x4 @ addr_RRR__(out, in1, in2)      ; xor rOUT, rIN1, rIN2
    not {out: reg}, {in1: reg}              => 0x5 @ addr_RRR__(out, in1, r0 )      ; not rOUT, rIN1
    sl  {out: reg}, {in1: reg}, #{imm: i4}  => 0x6 @ addr_RRI4_(out, in1, imm4)     ; sl  rOUT, rIN, #imm4
    sr  {out: reg}, {in1: reg}, #{imm: i4}  => 0x7 @ addr_RRI4_(out, in1, imm4)     ; sr  rOUT, rIN, #imm4
    cmp             {in1: reg}, {in2: reg}  => 0x8 @ addr_RRR__(r0,  in1, in2)      ; cmp rIN1, rIN2
    add {out: reg}, {in1: reg}, {in2: reg}  => 0x9 @ addr_RRR__(out, in1, in2)      ; add rOUT, rIN1, rIN2
    jeq #{abs_addr: s12}                    => 0xA @ addr_I12__(abs_addr)           ; jeq #imm12
    jgt #{abs_addr: s12}                    => 0xB @ addr_I12__(abs_addr)           ; jgt #imm12
    jlt #{abs_addr: s12}                    => 0xC @ addr_I12__(abs_addr)           ; jlt #imm12
    ld {dest: reg}, {addr: reg}[{off: reg}] => 0xD @ addr_RRR__(dest, addr, off)    ; ld  rOUT, rADDR[rOFF]
    ldl {dest: reg}, #{imm: i8}             => 0xE @ addr_RI0__(dest, imm)          ; ldl rOUT, #imm8
    st {addr: reg}[#{off: i4}], {src: reg}  => 0xF @ addr_I4RR_(off, addr, src)     ; st  rADDR[#imm4], rIN1
}

